// NativeWindowBoundsEvent_as.hx:  ActionScript 3 "NativeWindowBoundsEvent" class, for Gnash.
//
// Generated by gen-as3.sh on: 20090515 by "rob". Remove this
// after any hand editing loosing changes.
//
//   Copyright (C) 2009, 2010 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This test case must be processed by CPP before compiling to include the
//  DejaGnu.hx header file for the testing framework support.

#if flash9
import flash.events.NativeWindowBoundsEvent;
import flash.display.MovieClip;
#else
import flash.NativeWindowBoundsEvent;
import flash.MovieClip;
#end
import flash.Lib;
import Type;

// import our testing API
import DejaGnu;

// Class must be named with the _as suffix, as that's the same name as the file.
class NativeWindowBoundsEvent_as {
    static function main() {
        var x1:NativeWindowBoundsEvent = new NativeWindowBoundsEvent();

        // Make sure we actually get a valid class        
        if (x1 != null) {
            DejaGnu.pass("NativeWindowBoundsEvent class exists");
        } else {
            DejaGnu.fail("NativeWindowBoundsEvent class doesn't exist");
        }
// Tests to see if all the properties exist. All these do is test for
// existance of a property, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
	if (x1.afterBounds == Rectangle) {
	    DejaGnu.pass("NativeWindowBoundsEvent.afterBounds property exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent.afterBounds property doesn't exist");
	}
	if (x1.beforeBounds == Rectangle) {
	    DejaGnu.pass("NativeWindowBoundsEvent.beforeBounds property exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent.beforeBounds property doesn't exist");
	}

// Tests to see if all the methods exist. All these do is test for
// existance of a method, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
	if (x1.NativeWindowBoundsEvent == Rectangle) {
	    DejaGnu.pass("NativeWindowBoundsEvent::NativeWindowBoundsEvent() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::NativeWindowBoundsEvent() method doesn't exist");
	}
	if (x1.clone == Event) {
	    DejaGnu.pass("NativeWindowBoundsEvent::clone() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::clone() method doesn't exist");
	}
	if (x1.toString == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::toString() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::toString() method doesn't exist");
	}
	if (x1.ACTIVATE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::ACTIVATE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::ACTIVATE() method doesn't exist");
	}
	if (x1.ADDED == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::ADDED() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::ADDED() method doesn't exist");
	}
	if (x1.ADDED == TO) {
	    DejaGnu.pass("NativeWindowBoundsEvent::ADDED() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::ADDED() method doesn't exist");
	}
	if (x1.CANCEL == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::CANCEL() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::CANCEL() method doesn't exist");
	}
	if (x1.CHANGE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::CHANGE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::CHANGE() method doesn't exist");
	}
	if (x1.CLOSE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::CLOSE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::CLOSE() method doesn't exist");
	}
	if (x1.CLOSING == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::CLOSING() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::CLOSING() method doesn't exist");
	}
	if (x1.COMPLETE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::COMPLETE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::COMPLETE() method doesn't exist");
	}
	if (x1.CONNECT == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::CONNECT() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::CONNECT() method doesn't exist");
	}
	if (x1.DEACTIVATE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::DEACTIVATE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::DEACTIVATE() method doesn't exist");
	}
	if (x1.DISPLAYING == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::DISPLAYING() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::DISPLAYING() method doesn't exist");
	}
	if (x1.ENTER == FRAME) {
	    DejaGnu.pass("NativeWindowBoundsEvent::ENTER() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::ENTER() method doesn't exist");
	}
	if (x1.EXITING == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::EXITING() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::EXITING() method doesn't exist");
	}
	if (x1.FULLSCREEN == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::FULLSCREEN() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::FULLSCREEN() method doesn't exist");
	}
	if (x1.HTML == BOUNDS) {
	    DejaGnu.pass("NativeWindowBoundsEvent::HTML() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::HTML() method doesn't exist");
	}
	if (x1.HTML == DOM) {
	    DejaGnu.pass("NativeWindowBoundsEvent::HTML() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::HTML() method doesn't exist");
	}
	if (x1.HTML == RENDER) {
	    DejaGnu.pass("NativeWindowBoundsEvent::HTML() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::HTML() method doesn't exist");
	}
	if (x1.ID3 == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::ID3() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::ID3() method doesn't exist");
	}
	if (x1.INIT == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::INIT() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::INIT() method doesn't exist");
	}
	if (x1.LOCATION == CHANGE) {
	    DejaGnu.pass("NativeWindowBoundsEvent::LOCATION() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::LOCATION() method doesn't exist");
	}
	if (x1.MOUSE == LEAVE) {
	    DejaGnu.pass("NativeWindowBoundsEvent::MOUSE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::MOUSE() method doesn't exist");
	}
	if (x1.MOVE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::MOVE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::MOVE() method doesn't exist");
	}
	if (x1.MOVING == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::MOVING() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::MOVING() method doesn't exist");
	}
	if (x1.NETWORK == CHANGE) {
	    DejaGnu.pass("NativeWindowBoundsEvent::NETWORK() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::NETWORK() method doesn't exist");
	}
	if (x1.OPEN == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::OPEN() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::OPEN() method doesn't exist");
	}
	if (x1.REMOVED == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::REMOVED() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::REMOVED() method doesn't exist");
	}
	if (x1.REMOVED == FROM) {
	    DejaGnu.pass("NativeWindowBoundsEvent::REMOVED() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::REMOVED() method doesn't exist");
	}
	if (x1.RENDER == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::RENDER() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::RENDER() method doesn't exist");
	}
	if (x1.RESIZE == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::RESIZE() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::RESIZE() method doesn't exist");
	}
	if (x1.RESIZING == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::RESIZING() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::RESIZING() method doesn't exist");
	}
	if (x1.SCROLL == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::SCROLL() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::SCROLL() method doesn't exist");
	}
	if (x1.SELECT == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::SELECT() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::SELECT() method doesn't exist");
	}
	if (x1.SOUND == COMPLETE) {
	    DejaGnu.pass("NativeWindowBoundsEvent::SOUND() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::SOUND() method doesn't exist");
	}
	if (x1.TAB == CHILDREN) {
	    DejaGnu.pass("NativeWindowBoundsEvent::TAB() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::TAB() method doesn't exist");
	}
	if (x1.TAB == ENABLED) {
	    DejaGnu.pass("NativeWindowBoundsEvent::TAB() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::TAB() method doesn't exist");
	}
	if (x1.TAB == INDEX) {
	    DejaGnu.pass("NativeWindowBoundsEvent::TAB() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::TAB() method doesn't exist");
	}
	if (x1.UNLOAD == null) {
	    DejaGnu.pass("NativeWindowBoundsEvent::UNLOAD() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::UNLOAD() method doesn't exist");
	}
	if (x1.USER == IDLE) {
	    DejaGnu.pass("NativeWindowBoundsEvent::USER() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::USER() method doesn't exist");
	}
	if (x1.USER == PRESENT) {
	    DejaGnu.pass("NativeWindowBoundsEvent::USER() method exists");
	} else {
	    DejaGnu.fail("NativeWindowBoundsEvent::USER() method doesn't exist");
	}

        // Call this after finishing all tests. It prints out the totals.
        DejaGnu.done();
    }
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

