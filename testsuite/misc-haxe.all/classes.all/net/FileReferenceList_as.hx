// FileReferenceList_as.hx:  ActionScript 3 "FileReferenceList" class, for Gnash.
//
// Generated by gen-as3.sh on: 20090514 by "rob". Remove this
// after any hand editing loosing changes.
//
//   Copyright (C) 2009, 2010 Free Software Foundation, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
//

// This test case must be processed by CPP before compiling to include the
//  DejaGnu.hx header file for the testing framework support.

#if flash9
import flash.net.FileReferenceList;
import flash.display.MovieClip;
import flash.events.Event;
#end
#if flash8
import flash.net.FileReferenceList;
import flash.MovieClip;
#end
import flash.Lib;
import Type;
import Std;

// import our testing API
import DejaGnu;

// Class must be named with the _as suffix, as that's the same name as the file.
class FileReferenceList_as {
    static function main() {
        #if !(flash8 || flash9)
			DejaGnu.note("this is not valid for this version of flash (only 8 and higher)");
		#end
		#if flash9
		var x1:FileReferenceList = new FileReferenceList();

        // Make sure we actually get a valid class        
        if (x1 != null) {
            DejaGnu.pass("FileReferenceList class exists");
        } else {
            DejaGnu.xfail("FileReferenceList class doesn't exist");
        }
// Tests to see if all the properties exist. All these do is test for
// existance of a property, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
	
	//FIXME: This opens a dialog box which populates the array x1.fileList, we need
	//to figure out how to make this dialog go away (cancel) immediately.
	//x1.browse();
	
	//if (Std.is(x1.fileList, Array)) {
 	//    DejaGnu.pass("FileReferenceList.fileList property exists");
 	//} else {
 	//    DejaGnu.fail("FileReferenceList.fileList property doesn't exist");
 	//}

// Tests to see if all the methods exist. All these do is test for
// existance of a method, and don't test the functionality at all. This
// is primarily useful only to test completeness of the API implementation.
 	if (Type.typeof(x1.browse) == ValueType.TFunction) {
 	    DejaGnu.pass("FileReferenceList::browse() method exists");
 	} else {
 	    DejaGnu.xfail("FileReferenceList::browse() method doesn't exist");
 	}
	#end
	#if flash8
		var x2:FileReferenceList = new FileReferenceList();
	
	if (Std.is(x2.fileList, Array)){
		DejaGnu.pass("Filelist property exists");
	} else {
		DejaGnu.xfail("Filelist doesn't properly exist");
	}
	if (Type.typeof(x2.addListener) == ValueType.TFunction){
		DejaGnu.pass("addListener method exists");
	} else {
		DejaGnu.xfail("addListener method doesn't exist");
	}
	if (Type.typeof(x2.browse) == ValueType.TFunction) {
		DejaGnu.pass("browse method exists");
	} else {
		DejaGnu.xfail("browse method doesn't exist");
	}
	if (Type.typeof(x2.removeListener) == ValueType.TFunction){
		DejaGnu.pass("removeListener method exists");
	} else {
		DejaGnu.xfail("removeListener method doesn't exist");
	}
	#end
        // Call this after finishing all tests. It prints out the totals.
        DejaGnu.done();
    }
}

// local Variables:
// mode: C++
// indent-tabs-mode: t
// End:

